- name: Create additional files for tests
  working-directory: ./backend
  run: |
    # 创建配置文件
    cat > babel.config.js << 'EOF'
    module.exports = {
      presets: [
        ['@babel/preset-env', { targets: { node: 'current' } }],
        '@babel/preset-typescript'
      ],
      plugins: [
        '@babel/plugin-transform-modules-commonjs'
      ]
    };
    EOF
    
    # 创建模型文件
    mkdir -p src/models
    
    cat > src/models/User.js << 'EOF'
    export default {
      findOne: jest.fn().mockImplementation((query) => {
        if (query.email === 'existing@example.com') {
          return { _id: '123', email: 'existing@example.com', password: 'hashedpassword' };
        }
        return null;
      }),
      create: jest.fn().mockImplementation((data) => ({ _id: '456', ...data }))
    };
    EOF
    
    cat > src/models/Address.js << 'EOF'
    export default {
      findOne: jest.fn(),
      create: jest.fn(),
      find: jest.fn().mockReturnValue({
        sort: jest.fn().mockReturnThis(),
        limit: jest.fn().mockReturnThis(),
        exec: jest.fn().mockResolvedValue([
          { address: '0x123', riskScore: 0.8 },
          { address: '0x456', riskScore: 0.3 }
        ])
      })
    };
    EOF
    
    cat > src/models/Transaction.js << 'EOF'
    export default {
      findOne: jest.fn(),
      create: jest.fn(),
      find: jest.fn().mockReturnValue({
        sort: jest.fn().mockReturnThis(),
        limit: jest.fn().mockReturnThis(),
        exec: jest.fn().mockResolvedValue([
          { hash: '0xabc', from: '0x123', to: '0x456', value: '1.0' },
          { hash: '0xdef', from: '0x789', to: '0x123', value: '2.5' }
        ])
      })
    };
    EOF
    
    # 创建控制器文件
    mkdir -p src/controllers
    
    cat > src/controllers/auth.controller.js << 'EOF'
    export const register = async (req, res) => {
      try {
        if (req.body.email === 'existing@example.com') {
          return res.status(400).json({ success: false, message: '用户已存在' });
        }
        return res.status(201).json({ success: true, message: '注册成功' });
      } catch (error) {
        return res.status(500).json({ success: false, message: '服务器错误' });
      }
    };

    export const login = async (req, res) => {
      try {
        if (req.body.email === 'valid@example.com' && req.body.password === 'password') {
          return res.status(200).json({ success: true, token: 'mock-token' });
        }
        return res.status(401).json({ success: false, message: '无效的凭据' });
      } catch (error) {
        return res.status(500).json({ success: false, message: '服务器错误' });
      }
    };
    EOF
    
    cat > src/controllers/address.controller.js << 'EOF'
    export const getAddresses = async (req, res) => {
      try {
        return res.status(200).json({
          success: true,
          data: [
            { address: '0x123', riskScore: 0.8 },
            { address: '0x456', riskScore: 0.3 }
          ]
        });
      } catch (error) {
        return res.status(500).json({ success: false, message: '服务器错误' });
      }
    };
    EOF
    
    cat > src/controllers/transactions.controller.js << 'EOF'
    export const getTransactions = async (req, res) => {
      try {
        return res.status(200).json({
          success: true,
          data: [
            { hash: '0xabc', from: '0x123', to: '0x456', value: '1.0' },
            { hash: '0xdef', from: '0x789', to: '0x123', value: '2.5' }
          ]
        });
      } catch (error) {
        return res.status(500).json({ success: false, message: '服务器错误' });
      }
    };
    EOF
    
    # 创建中间件文件
    mkdir -p src/middleware
    
    cat > src/middleware/auth.js << 'EOF'
    export const protect = (req, res, next) => {
      const token = req.header('Authorization')?.replace('Bearer ', '');
      
      if (!token) {
        return res.status(401).json({ success: false, message: '未授权访问' });
      }
      
      if (token === 'mock-token') {
        req.user = { id: '123', email: 'user@example.com' };
        return next();
      }
      
      return res.status(401).json({ success: false, message: '无效的令牌' });
    };
    EOF
    
    # 创建路由文件
    mkdir -p src/routes
    
    cat > src/routes/auth.js << 'EOF'
    import express from 'express';
    import { register, login } from '../controllers/auth.controller.js';

    const router = express.Router();

    router.post('/register', register);
    router.post('/login', login);

    export default router;
    EOF
    
    cat > src/routes/address.js << 'EOF'
    import express from 'express';
    import { getAddresses } from '../controllers/address.controller.js';
    import { protect } from '../middleware/auth.js';

    const router = express.Router();

    router.get('/', protect, getAddresses);

    export default router;
    EOF
    
    cat > src/routes/transactions.js << 'EOF'
    import express from 'express';
    import { getTransactions } from '../controllers/transactions.controller.js';
    import { protect } from '../middleware/auth.js';

    const router = express.Router();

    router.get('/', protect, getTransactions);

    export default router;
    EOF
    
    # 创建工具函数文件
    mkdir -p src/utils
    
    cat > src/utils/connectDB.js << 'EOF'
    export const connectWithRetry = jest.fn().mockResolvedValue(true);
    export const checkConnection = jest.fn().mockResolvedValue(true);
    export const getConnectionInfo = jest.fn().mockReturnValue({ host: 'localhost', port: 27017 });
    EOF
    
    cat > src/utils/error.js << 'EOF'
    export class AppError extends Error {
      constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
        this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
        this.isOperational = true;
        
        Error.captureStackTrace(this, this.constructor);
      }
    }
    EOF
    
    # 列出创建的文件
    echo "Created additional files:"
    find src -type f -name "*.js" | grep -v "node_modules" | sort
