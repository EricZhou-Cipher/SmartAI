name: ChainIntel AI CI/CD

# 此工作流是主要的 CI/CD 流程，用于测试、构建和部署 ChainIntel AI 项目
# 其他工作流已设置为仅手动触发，以避免重复运行

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_ENV: test
  CI: true
  COVERAGE_THRESHOLD_STATEMENTS: 50
  COVERAGE_THRESHOLD_BRANCHES: 30
  COVERAGE_THRESHOLD_FUNCTIONS: 45
  COVERAGE_THRESHOLD_LINES: 50

jobs:
  backend_test:
    name: 测试后端
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: 🧹 清除 npm 缓存
        run: |
          npm cache clean --force
          echo "已清除 npm 缓存"

      - name: 🧹 清除 node_modules
        working-directory: ./backend
        run: |
          if [ -d "node_modules" ]; then
            rm -rf node_modules
            echo "已移除 node_modules 目录"
          fi

      - name: 📥 安装后端依赖
        working-directory: ./backend
        run: npm ci --no-fund --network-timeout 300000

      - name: 📋 显示已安装的 Babel 包
        working-directory: ./backend
        run: |
          echo "已安装的 Babel 包:"
          npm list @babel/core @babel/preset-env @babel/plugin-transform-modules-commonjs babel-jest @babel/cli || true

      - name: 🧪 运行测试并生成覆盖率报告
        working-directory: ./backend
        run: npm run test:ci
        env:
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test

      - name: 📤 上传覆盖率报告
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-reports
          path: |
            backend/coverage/coverage-summary.json
            backend/coverage/lcov-report/
          retention-days: 7

      - name: 📊 检查覆盖率阈值
        working-directory: ./backend
        run: |
          if [ ! -f coverage/coverage-summary.json ]; then
            echo "未找到覆盖率文件"
            exit 1
          fi

          COVERAGE=$(cat coverage/coverage-summary.json)
          STATEMENTS=$(echo $COVERAGE | jq -r '.total.statements.pct')
          BRANCHES=$(echo $COVERAGE | jq -r '.total.branches.pct')
          FUNCTIONS=$(echo $COVERAGE | jq -r '.total.functions.pct')
          LINES=$(echo $COVERAGE | jq -r '.total.lines.pct')

          if (( $(echo "$STATEMENTS < $COVERAGE_THRESHOLD_STATEMENTS" | bc -l) )); then
            echo "语句覆盖率 ($STATEMENTS%) 低于阈值 ($COVERAGE_THRESHOLD_STATEMENTS%)"
            exit 1
          fi

          if (( $(echo "$BRANCHES < $COVERAGE_THRESHOLD_BRANCHES" | bc -l) )); then
            echo "分支覆盖率 ($BRANCHES%) 低于阈值 ($COVERAGE_THRESHOLD_BRANCHES%)"
            exit 1
          fi

          if (( $(echo "$FUNCTIONS < $COVERAGE_THRESHOLD_FUNCTIONS" | bc -l) )); then
            echo "函数覆盖率 ($FUNCTIONS%) 低于阈值 ($COVERAGE_THRESHOLD_FUNCTIONS%)"
            exit 1
          fi

          if (( $(echo "$LINES < $COVERAGE_THRESHOLD_LINES" | bc -l) )); then
            echo "行覆盖率 ($LINES%) 低于阈值 ($COVERAGE_THRESHOLD_LINES%)"
            exit 1
          fi

  frontend_test:
    name: 测试前端
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: 📥 安装前端依赖
        working-directory: ./frontend
        run: npm ci --no-fund

      - name: 🧪 运行前端测试
        working-directory: ./frontend
        run: npm test

      - name: 🔍 运行前端代码检查
        working-directory: ./frontend
        run: npm run lint

  build:
    name: 构建项目
    needs: [backend_test, frontend_test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📥 安装后端依赖
        working-directory: ./backend
        run: npm ci --no-fund --network-timeout 300000

      - name: 🏗️ 构建后端
        working-directory: ./backend
        run: npm run build

      - name: 📥 安装前端依赖
        working-directory: ./frontend
        run: npm ci --no-fund

      - name: 🏗️ 构建前端
        working-directory: ./frontend
        run: npm run build

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist
            frontend/build
          retention-days: 7

  deploy:
    name: 部署到生产环境
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4

      - name: 📦 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 📋 显示构建产物
        run: |
          echo "构建产物内容:"
          ls -la
          echo "后端构建:"
          ls -la backend/dist || echo "后端构建目录不存在"
          echo "前端构建:"
          ls -la frontend/build || echo "前端构建目录不存在"

      # 这里添加实际部署步骤
      - name: 🚢 部署到服务器
        run: |
          echo "模拟部署到生产环境..."
          # 实际部署命令将在这里添加
          echo "✅ 部署完成"
